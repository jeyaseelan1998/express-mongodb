const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");

const { ApiError } = require("../helper/ApiError");
const { ApiResponse } = require("../helper/ApiResponse");

const User = require("../modals/UserModal");

const RegisterController = async (request, response) => {
    const { username, password } = request.body;

    try {
        const existingUser = await User.findOne({
            $or: [{ username }],
        });

        if (existingUser) {
            return response
                .status(400)
                .send(new ApiError(400, "username already exists"));
        }

        const passwordHash = await bcrypt.hash(password, 10);

        const user = await User.create({
            username,
            password: passwordHash,
        });

        const addedUser = await User.findById(user._id).select(
            "-password -refreshToken"
        );

        if (!addedUser) {
            response
                .status(500)
                .send(
                    new ApiError(
                        500,
                        "Something went wrong while creating user"
                    )
                );
        }
        response
            .status(200)
            .send(new ApiResponse(201, { username }, "Registration success"));
    } catch (error) {
        response.status(500).send(new ApiError(500, error.message));
    }
};

const LoginController = async (request, response) => {
    const { username, password } = request.body;

    try {
        const user = await User.findOne({
            $or: [{ username }],
        });

        if (!user) {
            response.status(401).send(new ApiError(401, "username not found"));
        } else {
            const isPasswordCorrect = await bcrypt.compare(
                password,
                user.password
            );

            if (!isPasswordCorrect) {
                response
                    .status(401)
                    .send(new ApiError(401, "password is incorrect"));
            } else {
                const jwt_token = jwt.sign(
                    {
                        username,
                        password,
                    },
                    process.env.ACCESS_TOKEN_SECRET,
                    { expiresIn: process.env.ACCESS_TOKEN_EXPIRY }
                );

                response.status(200).send(new ApiResponse(200, { jwt_token }));
            }
        }
    } catch (error) {
        response.status(500).send(new ApiError(500, error.message));
    }
};

module.exports = {
    LoginController,
    RegisterController,
};
